(()=>{"use strict";class i{constructor(i,t,s){this.position=i,this.image=t,this.ctx=s}draw(){this.ctx.drawImage(this.image,this.position.x,this.position.y,i.width,i.height)}}i.width=40,i.height=40;let t=document.createElement("h1");t.textContent="Welcome to TypeScript! Pacman";const s=document.createElement("canvas"),e=s.getContext("2d");s.width=window.innerWidth,s.height=window.innerHeight,s.id="cvs";let o=document.getElementById("app");o.appendChild(t),o.appendChild(s);const n=[],h=[];let a=new Image,c=new Image,r=new Image,d=new Image,p=new Image,w=new Image,y=new Image;a.src="./sprites/block.png",c.src="./sprites/top-bottom.png",r.src="./sprites/left-right.png",d.src="./sprites/top-left.png",p.src="./sprites/top-right.png",w.src="./sprites/bottom-left.png",y.src="./sprites/bottom-right.png",[["tl","=","=","=","=","=","tr"],["|"," ","*","*","*","*","|"],["|","*","-","*","-","*","|"],["|","*","*","*","*","*","|"],["|","*","-","*","-","*","|"],["|","*","*","*","*","*","|"],["bl","=","=","=","=","=","br"]].forEach(((t,s)=>{t.forEach(((t,o)=>{"-"===t?n.push(new i({x:o*i.width,y:s*i.height},a,e)):"="===t?n.push(new i({x:o*i.width,y:s*i.height},c,e)):"|"===t?n.push(new i({x:o*i.width,y:s*i.height},r,e)):"tl"===t?n.push(new i({x:o*i.width,y:s*i.height},d,e)):"tr"===t?n.push(new i({x:o*i.width,y:s*i.height},p,e)):"bl"===t?n.push(new i({x:o*i.width,y:s*i.height},w,e)):"br"===t?n.push(new i({x:o*i.width,y:s*i.height},y,e)):"*"===t&&h.push(new class{constructor(i,t){this.position=i,this.radius=5,this.ctx=t}draw(){this.ctx.fillStyle="green",this.ctx.beginPath(),this.ctx.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),this.ctx.fill(),this.ctx.closePath()}}({x:o*i.width+i.width/2,y:s*i.height+i.height/2},e))}))}));const l=new class{constructor(i,t){this.position=i,this.velocity={x:0,y:0},this.radius=15,this.ctx=t}draw(){this.ctx.fillStyle="yellow",this.ctx.beginPath(),this.ctx.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),this.ctx.fill(),this.ctx.closePath()}update(){this.draw(),this.position.y+=this.velocity.y,this.position.x+=this.velocity.x}}({x:i.width+i.width/2,y:i.height+i.height/2},e),g={w:{isDown:!1},a:{isDown:!1},s:{isDown:!1},d:{isDown:!1}};let x="";const u=(t,s)=>t.position.x+t.radius+t.velocity.x>=s.position.x&&t.position.x-t.radius+t.velocity.x<=s.position.x+i.width&&t.position.y+t.radius+t.velocity.y>=s.position.y&&t.position.y-t.radius+t.velocity.y<=s.position.y+i.height;let b=()=>{if(requestAnimationFrame(b),e.clearRect(0,0,s.width,s.height),g.w.isDown&&"w"===x)for(let i=0;i<n.length;i++){if(u(Object.assign(Object.assign({},l),{velocity:{x:0,y:-5}}),n[i])){l.velocity.y=0;break}l.velocity.y=-5}else if(g.a.isDown&&"a"===x)for(let i=0;i<n.length;i++){if(u(Object.assign(Object.assign({},l),{velocity:{x:-5,y:0}}),n[i])){l.velocity.x=0;break}l.velocity.x=-5}else if(g.s.isDown&&"s"===x)for(let i=0;i<n.length;i++){if(u(Object.assign(Object.assign({},l),{velocity:{x:0,y:5}}),n[i])){l.velocity.y=0;break}l.velocity.y=5}else if(g.d.isDown&&"d"===x)for(let i=0;i<n.length;i++){if(u(Object.assign(Object.assign({},l),{velocity:{x:5,y:0}}),n[i])){l.velocity.x=0;break}l.velocity.x=5}n.forEach((i=>{i.draw(),u(l,i)&&(l.velocity.x=0,l.velocity.y=0)})),h.forEach(((i,t)=>{var s,e;i.draw(),s=l,e=i,(Math.hypot(s.position.x+s.radius-e.position.x,s.position.y+s.radius-e.position.y)<=s.radius+e.radius||Math.hypot(s.position.x-s.radius-e.position.x,s.position.y+s.radius-e.position.y)<=s.radius+e.radius||Math.hypot(s.position.x+s.radius-e.position.x,s.position.y-s.radius-e.position.y)<=s.radius+e.radius||Math.hypot(s.position.x-s.radius-e.position.x,s.position.y-s.radius-e.position.y)<=s.radius+e.radius)&&h.splice(t,1)})),l.update()};window.addEventListener("keydown",(i=>{switch(i.key){case"a":g.a.isDown=!0,x="a";break;case"d":g.d.isDown=!0,x="d";break;case"w":g.w.isDown=!0,x="w";break;case"s":g.s.isDown=!0,x="s"}})),window.addEventListener("keyup",(i=>{switch(i.key){case"a":g.a.isDown=!1;break;case"d":g.d.isDown=!1;break;case"w":g.w.isDown=!1;break;case"s":g.s.isDown=!1}})),b()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,