(()=>{"use strict";class i{constructor(i,t,s){this.position=i,this.image=t,this.ctx=s}draw(){this.ctx.drawImage(this.image,this.position.x,this.position.y,i.width,i.height)}}i.width=40,i.height=40;let t=document.createElement("h1");t.textContent="Welcome to TypeScript! Pacman";const s=document.createElement("canvas"),e=s.getContext("2d");s.width=window.innerWidth,s.height=window.innerHeight,s.id="cvs";let o=document.getElementById("app");o.appendChild(t),o.appendChild(s);class n{constructor(i){this.position=i,this.radius=5}draw(){e.fillStyle="green",e.beginPath(),e.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),e.fill(),e.closePath()}}const a=[],h=[];let r=new Image,c=new Image,d=new Image,p=new Image,w=new Image,y=new Image,l=new Image;r.src="./sprites/block.png",c.src="./sprites/top-bottom.png",d.src="./sprites/left-right.png",p.src="./sprites/top-left.png",w.src="./sprites/top-right.png",y.src="./sprites/bottom-left.png",l.src="./sprites/bottom-right.png",[["tl","=","=","=","=","=","tr"],["|"," ","*","*","*","*","|"],["|","*","-","*","-","*","|"],["|","*","*","*","*","*","|"],["|","*","-","*","-","*","|"],["|","*","*","*","*","*","|"],["bl","=","=","=","=","=","br"]].forEach(((t,s)=>{t.forEach(((t,o)=>{"-"===t?a.push(new i({x:o*i.width,y:s*i.height},r,e)):"="===t?a.push(new i({x:o*i.width,y:s*i.height},c,e)):"|"===t?a.push(new i({x:o*i.width,y:s*i.height},d,e)):"tl"===t?a.push(new i({x:o*i.width,y:s*i.height},p,e)):"tr"===t?a.push(new i({x:o*i.width,y:s*i.height},w,e)):"bl"===t?a.push(new i({x:o*i.width,y:s*i.height},y,e)):"br"===t?a.push(new i({x:o*i.width,y:s*i.height},l,e)):"*"===t&&h.push(new n({x:o*i.width+i.width/2,y:s*i.height+i.height/2}))}))}));const g=new class{constructor(i){this.position=i,this.velocity={x:0,y:0},this.radius=15}draw(){e.fillStyle="yellow",e.beginPath(),e.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),e.fill(),e.closePath()}update(){this.draw(),this.position.y+=this.velocity.y,this.position.x+=this.velocity.x}}({x:i.width+i.width/2,y:i.height+i.height/2}),u={w:{isDown:!1},a:{isDown:!1},s:{isDown:!1},d:{isDown:!1}};let x="";const b=(t,s)=>t.position.x+t.radius+t.velocity.x>=s.position.x&&t.position.x-t.radius+t.velocity.x<=s.position.x+i.width&&t.position.y+t.radius+t.velocity.y>=s.position.y&&t.position.y-t.radius+t.velocity.y<=s.position.y+i.height;let v=()=>{if(requestAnimationFrame(v),e.clearRect(0,0,s.width,s.height),u.w.isDown&&"w"===x)for(let i=0;i<a.length;i++){if(b(Object.assign(Object.assign({},g),{velocity:{x:0,y:-5}}),a[i])){g.velocity.y=0;break}g.velocity.y=-5}else if(u.a.isDown&&"a"===x)for(let i=0;i<a.length;i++){if(b(Object.assign(Object.assign({},g),{velocity:{x:-5,y:0}}),a[i])){g.velocity.x=0;break}g.velocity.x=-5}else if(u.s.isDown&&"s"===x)for(let i=0;i<a.length;i++){if(b(Object.assign(Object.assign({},g),{velocity:{x:0,y:5}}),a[i])){g.velocity.y=0;break}g.velocity.y=5}else if(u.d.isDown&&"d"===x)for(let i=0;i<a.length;i++){if(b(Object.assign(Object.assign({},g),{velocity:{x:5,y:0}}),a[i])){g.velocity.x=0;break}g.velocity.x=5}a.forEach((i=>{i.draw(),b(g,i)&&(g.velocity.x=0,g.velocity.y=0)})),h.forEach(((i,t)=>{var s,e;i.draw(),s=g,e=i,(Math.hypot(s.position.x+s.radius-e.position.x,s.position.y+s.radius-e.position.y)<=s.radius+e.radius||Math.hypot(s.position.x-s.radius-e.position.x,s.position.y+s.radius-e.position.y)<=s.radius+e.radius||Math.hypot(s.position.x+s.radius-e.position.x,s.position.y-s.radius-e.position.y)<=s.radius+e.radius||Math.hypot(s.position.x-s.radius-e.position.x,s.position.y-s.radius-e.position.y)<=s.radius+e.radius)&&h.splice(t,1)})),g.update()};window.addEventListener("keydown",(i=>{switch(i.key){case"a":u.a.isDown=!0,x="a";break;case"d":u.d.isDown=!0,x="d";break;case"w":u.w.isDown=!0,x="w";break;case"s":u.s.isDown=!0,x="s"}})),window.addEventListener("keyup",(i=>{switch(i.key){case"a":u.a.isDown=!1;break;case"d":u.d.isDown=!1;break;case"w":u.w.isDown=!1;break;case"s":u.s.isDown=!1}})),v()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0csRUFBRUQsUUFBUyxFQUNoQixNQUNKLElBQUssSUFDREYsRUFBS0ssRUFBRUgsUUFBUyxFQUNoQixNQUNKLElBQUssSUFDREYsRUFBS0MsRUFBRUMsUUFBUyxFQUNoQixNQUNKLElBQUssSUFDREYsRUFBS0ksRUFBRUYsUUFBUyxFLElBSzVCUSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFjbWFuLXR5cGVzY3JpcHQvLi9Cb3VuZGFyeS50cyIsIndlYnBhY2s6Ly9wYWNtYW4tdHlwZXNjcmlwdC8uL2FwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFBvc2l0aW9uID0geyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuXG5jbGFzcyBCb3VuZGFyeSB7XG4gICAgcG9zaXRpb246IFBvc2l0aW9uO1xuICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIHN0YXRpYyB3aWR0aCA9IDQwO1xuICAgIHN0YXRpYyBoZWlnaHQgPSA0MDtcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICAgIGNvbnN0cnVjdG9yKHBvc2l0aW9uOiBQb3NpdGlvbiwgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICAvLyBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgICAgIC8vIGN0eC5maWxsUmVjdCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgQm91bmRhcnkud2lkdGgsIEJvdW5kYXJ5LmhlaWdodCk7XG4gICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCB0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgQm91bmRhcnkud2lkdGgsIEJvdW5kYXJ5LmhlaWdodCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCb3VuZGFyeSwgUG9zaXRpb259IiwiLy8gQ3JlYXRlZCBmcm9tIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj01SU1YcHAzcm9oUVxuXG5pbXBvcnQgeyBCb3VuZGFyeSwgUG9zaXRpb24gfSBmcm9tIFwiLi9Cb3VuZGFyeVwiO1xuXG5sZXQgd2VsY29tZTogc3RyaW5nID0gXCJXZWxjb21lIHRvIFR5cGVTY3JpcHQhIFBhY21hblwiO1xuXG5sZXQgaGVhZGluZzogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XG5oZWFkaW5nLnRleHRDb250ZW50ID0gd2VsY29tZTtcblxuY29uc3QgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5jb25zdCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG5cbmNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuY2FudmFzLmlkID0gXCJjdnNcIjtcblxubGV0IGFwcDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKTtcbmFwcC5hcHBlbmRDaGlsZChoZWFkaW5nKTtcbmFwcC5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG5jbGFzcyBQYWNtYW4ge1xuICAgIHBvc2l0aW9uOiBQb3NpdGlvbjtcbiAgICB2ZWxvY2l0eToge3g6IG51bWJlciwgeTogbnVtYmVyfTtcbiAgICByYWRpdXM6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjogUG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHRoaXMucmFkaXVzID0gMTU7XG4gICAgfVxuXG4gICAgZHJhdygpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwieWVsbG93XCI7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmFyYyh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgdGhpcy5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLnZlbG9jaXR5Lnk7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLnZlbG9jaXR5Lng7XG4gICAgfVxufVxuXG5jbGFzcyBGb29kIHtcbiAgICBwb3NpdGlvbjogUG9zaXRpb247XG4gICAgcmFkaXVzOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IocG9zaXRpb246IFBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSA1O1xuICAgIH1cblxuICAgIGRyYXcoKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmFyYyh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgdGhpcy5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbn1cblxuY29uc3QgZ2FtZU1hcDogc3RyaW5nW11bXSA9IFtcbiAgICBbJ3RsJywgJz0nLCc9JywnPScsJz0nLCc9JywndHInXSxcbiAgICBbJ3wnLCAnICcsJyonLCcqJywnKicsJyonLCd8J10sXG4gICAgWyd8JywgJyonLCctJywnKicsJy0nLCcqJywnfCddLFxuICAgIFsnfCcsICcqJywnKicsJyonLCcqJywnKicsJ3wnXSxcbiAgICBbJ3wnLCAnKicsJy0nLCcqJywnLScsJyonLCd8J10sXG4gICAgWyd8JywgJyonLCcqJywnKicsJyonLCcqJywnfCddLFxuICAgIFsnYmwnLCAnPScsJz0nLCc9JywnPScsJz0nLCdiciddLFxuXVxuXG5sZXQgbWFuVmVsb2NpdHkgPSA1O1xuXG5jb25zdCBib3VuZGFyaWVzOiBCb3VuZGFyeVtdID0gW107XG5jb25zdCBmb29kUGVsbGV0czogRm9vZFtdID0gW107XG5cbmxldCBibG9jayA9IG5ldyBJbWFnZSgpO1xubGV0IHRvcF9ib3R0b20gPSBuZXcgSW1hZ2UoKTtcbmxldCBsZWZ0X3JpZ2h0ID0gbmV3IEltYWdlKCk7XG5sZXQgdG9wX2xlZnQgPSBuZXcgSW1hZ2UoKTtcbmxldCB0b3BfcmlnaHQgPSBuZXcgSW1hZ2UoKTtcbmxldCBib3R0b21fbGVmdCA9IG5ldyBJbWFnZSgpO1xubGV0IGJvdHRvbV9yaWdodCA9IG5ldyBJbWFnZSgpO1xuXG5ibG9jay5zcmMgPSBcIi4vc3ByaXRlcy9ibG9jay5wbmdcIjtcbnRvcF9ib3R0b20uc3JjID0gXCIuL3Nwcml0ZXMvdG9wLWJvdHRvbS5wbmdcIjtcbmxlZnRfcmlnaHQuc3JjID0gXCIuL3Nwcml0ZXMvbGVmdC1yaWdodC5wbmdcIjtcbnRvcF9sZWZ0LnNyYyA9IFwiLi9zcHJpdGVzL3RvcC1sZWZ0LnBuZ1wiO1xudG9wX3JpZ2h0LnNyYyA9IFwiLi9zcHJpdGVzL3RvcC1yaWdodC5wbmdcIjtcbmJvdHRvbV9sZWZ0LnNyYyA9IFwiLi9zcHJpdGVzL2JvdHRvbS1sZWZ0LnBuZ1wiO1xuYm90dG9tX3JpZ2h0LnNyYyA9IFwiLi9zcHJpdGVzL2JvdHRvbS1yaWdodC5wbmdcIjtcblxuXG5nYW1lTWFwLmZvckVhY2goKHJvdywgeSkgPT4ge1xuICAgIHJvdy5mb3JFYWNoKChjZWxsLCB4KSA9PiB7XG4gICAgICAgIGlmIChjZWxsID09PSAnLScpIHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXMucHVzaChuZXcgQm91bmRhcnkoeyB4OiB4ICogQm91bmRhcnkud2lkdGgsIHk6IHkgKiBCb3VuZGFyeS5oZWlnaHQgfSwgYmxvY2ssIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNlbGwgPT09ICc9Jykge1xuICAgICAgICAgICAgYm91bmRhcmllcy5wdXNoKG5ldyBCb3VuZGFyeSh7IHg6IHggKiBCb3VuZGFyeS53aWR0aCwgeTogeSAqIEJvdW5kYXJ5LmhlaWdodCB9LCB0b3BfYm90dG9tLCBjdHgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjZWxsID09PSAnfCcpIHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXMucHVzaChuZXcgQm91bmRhcnkoeyB4OiB4ICogQm91bmRhcnkud2lkdGgsIHk6IHkgKiBCb3VuZGFyeS5oZWlnaHQgfSwgbGVmdF9yaWdodCwgY3R4KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2VsbCA9PT0gJ3RsJykge1xuICAgICAgICAgICAgYm91bmRhcmllcy5wdXNoKG5ldyBCb3VuZGFyeSh7IHg6IHggKiBCb3VuZGFyeS53aWR0aCwgeTogeSAqIEJvdW5kYXJ5LmhlaWdodCB9LCB0b3BfbGVmdCwgY3R4KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2VsbCA9PT0gJ3RyJykge1xuICAgICAgICAgICAgYm91bmRhcmllcy5wdXNoKG5ldyBCb3VuZGFyeSh7IHg6IHggKiBCb3VuZGFyeS53aWR0aCwgeTogeSAqIEJvdW5kYXJ5LmhlaWdodCB9LCB0b3BfcmlnaHQsIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNlbGwgPT09ICdibCcpIHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXMucHVzaChuZXcgQm91bmRhcnkoeyB4OiB4ICogQm91bmRhcnkud2lkdGgsIHk6IHkgKiBCb3VuZGFyeS5oZWlnaHQgfSwgYm90dG9tX2xlZnQsIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNlbGwgPT09ICdicicpIHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXMucHVzaChuZXcgQm91bmRhcnkoeyB4OiB4ICogQm91bmRhcnkud2lkdGgsIHk6IHkgKiBCb3VuZGFyeS5oZWlnaHQgfSwgYm90dG9tX3JpZ2h0LCBjdHgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjZWxsID09PSAnKicpIHtcbiAgICAgICAgICAgIGZvb2RQZWxsZXRzLnB1c2gobmV3IEZvb2QoeyB4OiB4ICogQm91bmRhcnkud2lkdGggKyBCb3VuZGFyeS53aWR0aC8yLCB5OiB5ICogQm91bmRhcnkuaGVpZ2h0ICsgQm91bmRhcnkuaGVpZ2h0LzIgfSkpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuY29uc3QgcGFjbWFuOiBQYWNtYW4gPSBuZXcgUGFjbWFuKHsgeDogQm91bmRhcnkud2lkdGggKyBCb3VuZGFyeS53aWR0aCAvMiwgeTogQm91bmRhcnkuaGVpZ2h0ICsgQm91bmRhcnkuaGVpZ2h0IC8yIH0pO1xuXG5jb25zdCBrZXlzID0ge1xuICAgIHc6IHtcbiAgICAgICAgaXNEb3duOiBmYWxzZSxcbiAgICB9LFxuICAgIGE6IHtcbiAgICAgICAgaXNEb3duOiBmYWxzZSxcbiAgICB9LFxuICAgIHM6IHtcbiAgICAgICAgaXNEb3duOiBmYWxzZSxcbiAgICB9LFxuICAgIGQ6IHtcbiAgICAgICAgaXNEb3duOiBmYWxzZSxcbiAgICB9XG59XG5cbmxldCBsYXN0S2V5OiBzdHJpbmcgPSBcIlwiO1xuXG5cbmNvbnN0IGRlY3RlY3RDb2xsaXNpb24gPSAoY2lyY2xlLCByZWN0YW5nbGUpID0+IHtcbiAgICByZXR1cm4gY2lyY2xlLnBvc2l0aW9uLnggKyBjaXJjbGUucmFkaXVzICsgY2lyY2xlLnZlbG9jaXR5LnggPj0gcmVjdGFuZ2xlLnBvc2l0aW9uLnggJiYgXG4gICAgY2lyY2xlLnBvc2l0aW9uLnggLSBjaXJjbGUucmFkaXVzICsgY2lyY2xlLnZlbG9jaXR5LnggPD0gcmVjdGFuZ2xlLnBvc2l0aW9uLnggKyBCb3VuZGFyeS53aWR0aCAmJlxuICAgIGNpcmNsZS5wb3NpdGlvbi55ICsgY2lyY2xlLnJhZGl1cyArIGNpcmNsZS52ZWxvY2l0eS55ID49IHJlY3RhbmdsZS5wb3NpdGlvbi55ICYmXG4gICAgY2lyY2xlLnBvc2l0aW9uLnkgLSBjaXJjbGUucmFkaXVzICsgY2lyY2xlLnZlbG9jaXR5LnkgPD0gcmVjdGFuZ2xlLnBvc2l0aW9uLnkgKyBCb3VuZGFyeS5oZWlnaHRcbn1cblxuLy8gZnVuY3Rpb24gd3JpdHRlbiB1c2luZyBtYXRoLmh5cG90ZW51c2VcbmNvbnN0IGRldGVjdENvbGxpc2lvbldpdGhGb29kID0gKGNpcmNsZTogUGFjbWFuLCBmb29kOiBGb29kKSA9PiB7XG4gICAgcmV0dXJuIE1hdGguaHlwb3QoY2lyY2xlLnBvc2l0aW9uLnggKyBjaXJjbGUucmFkaXVzIC0gZm9vZC5wb3NpdGlvbi54LCBjaXJjbGUucG9zaXRpb24ueSArIGNpcmNsZS5yYWRpdXMgLSBmb29kLnBvc2l0aW9uLnkpIDw9IGNpcmNsZS5yYWRpdXMgKyBmb29kLnJhZGl1cyB8fFxuICAgIE1hdGguaHlwb3QoY2lyY2xlLnBvc2l0aW9uLnggLSBjaXJjbGUucmFkaXVzIC0gZm9vZC5wb3NpdGlvbi54LCBjaXJjbGUucG9zaXRpb24ueSArIGNpcmNsZS5yYWRpdXMgLSBmb29kLnBvc2l0aW9uLnkpIDw9IGNpcmNsZS5yYWRpdXMgKyBmb29kLnJhZGl1cyB8fFxuICAgIE1hdGguaHlwb3QoY2lyY2xlLnBvc2l0aW9uLnggKyBjaXJjbGUucmFkaXVzIC0gZm9vZC5wb3NpdGlvbi54LCBjaXJjbGUucG9zaXRpb24ueSAtIGNpcmNsZS5yYWRpdXMgLSBmb29kLnBvc2l0aW9uLnkpIDw9IGNpcmNsZS5yYWRpdXMgKyBmb29kLnJhZGl1cyB8fFxuICAgIE1hdGguaHlwb3QoY2lyY2xlLnBvc2l0aW9uLnggLSBjaXJjbGUucmFkaXVzIC0gZm9vZC5wb3NpdGlvbi54LCBjaXJjbGUucG9zaXRpb24ueSAtIGNpcmNsZS5yYWRpdXMgLSBmb29kLnBvc2l0aW9uLnkpIDw9IGNpcmNsZS5yYWRpdXMgKyBmb29kLnJhZGl1cztcblxufVxuXG5sZXQgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgaWYgKGtleXMudy5pc0Rvd24gJiYgbGFzdEtleSA9PT0gXCJ3XCIpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGJvdW5kYXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChkZWN0ZWN0Q29sbGlzaW9uKHsuLi5wYWNtYW4sIHZlbG9jaXR5OiB7eDowLCB5Oi1tYW5WZWxvY2l0eX19LCBib3VuZGFyaWVzW2ldKSkge1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS55ID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS55ID0gLW1hblZlbG9jaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleXMuYS5pc0Rvd24gJiYgbGFzdEtleSA9PT0gXCJhXCIpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGJvdW5kYXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChkZWN0ZWN0Q29sbGlzaW9uKHsuLi5wYWNtYW4sIHZlbG9jaXR5OiB7eDotbWFuVmVsb2NpdHksIHk6MH19LCBib3VuZGFyaWVzW2ldKSl7XG4gICAgICAgICAgICAgICAgcGFjbWFuLnZlbG9jaXR5LnggPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFjbWFuLnZlbG9jaXR5LnggPSAtbWFuVmVsb2NpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5cy5zLmlzRG93biAmJiBsYXN0S2V5ID09PSBcInNcIikge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYm91bmRhcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRlY3RlY3RDb2xsaXNpb24oey4uLnBhY21hbiwgdmVsb2NpdHk6IHt4OjAsIHk6bWFuVmVsb2NpdHl9fSwgYm91bmRhcmllc1tpXSkpe1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS55ID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS55ID0gbWFuVmVsb2NpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5cy5kLmlzRG93biAmJiBsYXN0S2V5ID09PSBcImRcIikge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYm91bmRhcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRlY3RlY3RDb2xsaXNpb24oey4uLnBhY21hbiwgdmVsb2NpdHk6IHt4Om1hblZlbG9jaXR5LCB5OjB9fSwgYm91bmRhcmllc1tpXSkpe1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS54ID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS54ID0gbWFuVmVsb2NpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBib3VuZGFyaWVzLmZvckVhY2goYm91bmRhcnkgPT4ge1xuICAgICAgICBib3VuZGFyeS5kcmF3KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGVjdGVjdENvbGxpc2lvbihwYWNtYW4sIGJvdW5kYXJ5KSkge1xuICAgICAgICAgICAgICAgIHBhY21hbi52ZWxvY2l0eS54ID0gMDtcbiAgICAgICAgICAgICAgICBwYWNtYW4udmVsb2NpdHkueSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb29kUGVsbGV0cy5mb3JFYWNoKChwZWxsZXQsIGkpID0+IHtcbiAgICAgICAgcGVsbGV0LmRyYXcoKTtcbiAgICAgICAgaWYgKGRldGVjdENvbGxpc2lvbldpdGhGb29kKHBhY21hbiwgcGVsbGV0KSkge1xuICAgICAgICAgICAgZm9vZFBlbGxldHMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBwYWNtYW4udXBkYXRlKCk7XG5cbiAgICAvLyBwYWNtYW4udmVsb2NpdHkueCA9IDA7XG4gICAgLy8gcGFjbWFuLnZlbG9jaXR5LnkgPSAwO1xuXG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICAgIGtleXMuYS5pc0Rvd24gPSB0cnVlO1xuICAgICAgICAgICAgbGFzdEtleSA9IFwiYVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgICBrZXlzLmQuaXNEb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RLZXkgPSBcImRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid1wiOlxuICAgICAgICAgICAga2V5cy53LmlzRG93biA9IHRydWU7XG4gICAgICAgICAgICBsYXN0S2V5ID0gXCJ3XCI7ICBcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAga2V5cy5zLmlzRG93biA9IHRydWU7XG4gICAgICAgICAgICBsYXN0S2V5ID0gXCJzXCI7IFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufSk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgXCJhXCI6XG4gICAgICAgICAgICBrZXlzLmEuaXNEb3duID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgICAgIGtleXMuZC5pc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid1wiOlxuICAgICAgICAgICAga2V5cy53LmlzRG93biA9IGZhbHNlOyAgXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgIGtleXMucy5pc0Rvd24gPSBmYWxzZTsgXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59KTtcblxuYW5pbWF0ZSgpO1xuXG5cbiJdLCJuYW1lcyI6WyJCb3VuZGFyeSIsImNvbnN0cnVjdG9yIiwicG9zaXRpb24iLCJpbWFnZSIsImN0eCIsInRoaXMiLCJkcmF3IiwiZHJhd0ltYWdlIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImhlYWRpbmciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImNhbnZhcyIsImdldENvbnRleHQiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJpZCIsImFwcCIsImdldEVsZW1lbnRCeUlkIiwiYXBwZW5kQ2hpbGQiLCJGb29kIiwicmFkaXVzIiwiZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbCIsImNsb3NlUGF0aCIsImJvdW5kYXJpZXMiLCJmb29kUGVsbGV0cyIsImJsb2NrIiwiSW1hZ2UiLCJ0b3BfYm90dG9tIiwibGVmdF9yaWdodCIsInRvcF9sZWZ0IiwidG9wX3JpZ2h0IiwiYm90dG9tX2xlZnQiLCJib3R0b21fcmlnaHQiLCJzcmMiLCJmb3JFYWNoIiwicm93IiwiY2VsbCIsInB1c2giLCJwYWNtYW4iLCJ2ZWxvY2l0eSIsInVwZGF0ZSIsImtleXMiLCJ3IiwiaXNEb3duIiwiYSIsInMiLCJkIiwibGFzdEtleSIsImRlY3RlY3RDb2xsaXNpb24iLCJjaXJjbGUiLCJyZWN0YW5nbGUiLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJSZWN0IiwiaSIsImxlbmd0aCIsImJvdW5kYXJ5IiwicGVsbGV0IiwiZm9vZCIsImh5cG90Iiwic3BsaWNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9